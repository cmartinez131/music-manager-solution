@page "/"
@using music_manager_starter.Shared

@inject HttpClient Http
@inject NavigationManager Navigation

@code {
    private List<Song> songs;
    private List<Song> filteredSongs;
    private string filterString = "";
    
    private float totalRating = 0;
    private float ratedSongs = 0;
    private float averageRating = 0;
    // Songs are displayed as cards by default
    private string songsDisplay = "card";

    protected override async Task OnInitializedAsync()
    {
        songs = await Http.GetFromJsonAsync<List<Song>>("api/songs");
        filteredSongs = new List<Song>(songs);
        // Calculate the average rating of all the songs
        CalculateAverageRating();
    }

    private void CalculateAverageRating()
    {
        totalRating = 0;
        ratedSongs = 0;
        foreach (var song in filteredSongs)
        {
            if (song.Rating != null)
            {
                totalRating += song.Rating.Value;
                ratedSongs += 1;
            }
        }
        if (ratedSongs > 0)
        {
            averageRating = totalRating / ratedSongs;
        }
        else
        {
            averageRating = 0;
        }
    }

    private void GoToSongDetails(Guid id)
    {
        Navigation.NavigateTo($"/SongDetails/{id}");
    }

    private void EditSong(Guid id)
    {
        Navigation.NavigateTo($"/EditSong/{id}");
    }

    private async Task DeleteSong(Guid id)
    {
        var response = await Http.DeleteAsync($"api/songs/{id}");
        if (response.IsSuccessStatusCode)
        {
            songs = await Http.GetFromJsonAsync<List<Song>>("api/songs");
            // After deletion, filter reapply filter on all the songs
            FilterAllSongs(filterString);
        }
    }

    // Filter the songs based on title, artist, album, or genre
    private void OnSearchTextChange(ChangeEventArgs e)
    {
        // Convert event object e input to a string, or an empty string if e.value is empty
        filterString = e.Value?.ToString() ?? "";

        filterString = filterString.ToLower();
        
        FilterAllSongs(filterString);
    }

    private void FilterAllSongs(String keyword)
    {
        if (string.IsNullOrWhiteSpace(keyword))
        {
            // If there is no filter text, show all the songs
            filteredSongs = new List<Song>(songs);
        }
        else
        {
            // Otherwise, filter the list of songs by making a new list and add songs that meet criteria
            filteredSongs = new List<Song>();

            foreach (var song in songs)
            {
                if ((!string.IsNullOrEmpty(song.Title) && song.Title.ToLower().Contains(keyword)) ||
                    (!string.IsNullOrEmpty(song.Artist) && song.Artist.ToLower().Contains(keyword)) ||
                    (!string.IsNullOrEmpty(song.Album) && song.Album.ToLower().Contains(keyword)) ||
                    (!string.IsNullOrEmpty(song.Genre) && song.Genre.ToLower().Contains(keyword)))
                {
                    filteredSongs.Add(song);
                }
            }
        }
        // Recalculate average rating after every filter change
        CalculateAverageRating();
    }

    private void OnSortOptionChange(ChangeEventArgs e)
    {
        var sortOption = e.Value?.ToString() ?? "earliestAdded";
        SortSongs(sortOption);
    }
    
    private void SortSongs(string sortOption)
    {
        // Default: Songs are sorted in the order that theyre created in the database.
        // Can make this more effiecint by adding a field to the song model for 'DateCreated'
        if (sortOption == "earliestAdded")
        {
            filteredSongs = new List<Song>(songs);
            FilterAllSongs(filterString);
        }
        else if (sortOption == "recentlyAdded")
        {
            filteredSongs = new List<Song>(songs);
            FilterAllSongs(filterString);
            filteredSongs.Reverse();

        }
        else if (sortOption == "titleAscending")
        {
            filteredSongs = filteredSongs.OrderBy(song => song.Title).ToList();
        }
        else if (sortOption == "titleDescending")
        {
            filteredSongs = filteredSongs.OrderByDescending(song => song.Title).ToList();
        }
        else if (sortOption == "ratingAscending")
        {
            filteredSongs = filteredSongs.OrderBy(song => song.Rating).ToList();
        }
        else if (sortOption == "ratingDescending")
        {
            filteredSongs = filteredSongs.OrderByDescending(song => song.Rating).ToList();
        }
    }

    private void OnDisplayOptionChange(ChangeEventArgs e)
    {
        songsDisplay = e.Value?.ToString() ?? "card";
    }
}

<div class="p-0 min-h-screen bg-pattern flex flex-col items-center justify-center">
    <h2 class="text-4xl font-bold text-white mb-8 text-center pt-4">Song Library</h2>
    <div class="fixed top-4 right-10 w-1/4">
        <input type="text" @oninput="OnSearchTextChange" placeholder="Search..." class="bg-gray-700 text-white px-4 py-2 rounded-full focus:outline-none mb-4 w-full">
    </div>

    <div class="flex items-center justify-between space-x-8 pb-4 text-lg">
        <h2 class="text-white">Average Rating: @averageRating.ToString("F2")</h2>
    
        <div>
            <label class="text-white" for="sortOption"> Sort songs by:</label>
            <select @onchange="OnSortOptionChange" name="sortOption" id="sortOption">
                <option value="earliestAdded">Earliest Added</option>
                <option value="recentlyAdded">Recently Added</option>
                <option value="titleAscending">Title (A - Z)</option>
                <option value="titleDescending">Title (Z - A)</option>
                <option value="ratingAscending">Rating (Lowest to Highest)</option>
                <option value="ratingDescending">Rating (Highest to Lowest)</option>
            </select>
        </div>

        <div >
            <label class="text-white" for="displayOption"> View As:</label>
            <select @onchange="OnDisplayOptionChange" name="displayOption" id="displayOption">
                <option value="card">Card</option>
                <option value="list">List</option>
            </select>
        </div>
    </div>

    
    @if (songsDisplay == "card")
    {
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
            @if (filteredSongs != null && filteredSongs.Count > 0)
            {
                @foreach (var song in filteredSongs)
                {
                    <div class="glass p-6 border border-gray-300 rounded-lg text-white transition-transform transform hover:scale-105 hover:shadow-xl cursor-pointer">
                        <h3 class="text-xl font-semibold mb-2">@song.Title</h3>
                        <p class="text-md">Artist: <span class="font-light">@song.Artist</span></p>
                        <p class="text-md">Rating: <span class="font-light">@song.Rating</span></p>
                        <button class="bg-blue-500 text-white px-4 py-2 mt-1 rounded" @onclick="() => GoToSongDetails(song.Id)">Details</button>
                        <button class="bg-fuchsia-500 text-white px-4 py-2 mt-2 rounded" @onclick="() => EditSong(song.Id)">Edit</button>
                        <button class="bg-red-500 text-white px-4 py-2 mt-2 rounded" @onclick="() => DeleteSong(song.Id)">Delete</button>
                    </div>
                }
            }
            else
            {
                <div class="col-span-1 text-center text-gray-400">No songs found.</div>
            }
        </div>
    }
    else if (songsDisplay == "list")
    {
        <div class="w-full px-4 text-neutral-200">
            <table class="table-auto w-full rounded-md overflow-hidden">
                <tr class=" bg-gray-900 ">
                    <th class="py-6 pl-2"></th>
                    <th class="pl-2">#</th>
                    <th class="">Title and Artist</th>
                    <th class="">Album</th>
                    <th class="">Rating</th>
                    <th class="pl-4">Actions</th>
                </tr>
                @foreach (var song in filteredSongs)
                {
                    <tr class="glass bg-slate-900 hover:bg-slate-400 transition">
                        <td class="text-lg pl-2">@(filteredSongs.IndexOf(song) + 1)</td>
                        <td class="text-xl text-white font-medium truncate">
                            <button @onclick="() => GoToSongDetails(song.Id)">@song.Title</button> 
                            <br><span class="text-sm text-neutral-200 font-normal">@song.Artist</span>
                        </td>
                        <td class="text-white">@song.Album</td>
                        <td class="text-neutral-200 pl-4">@song.Rating</td>
                        <td class="py-4">
                            <button class="bg-purple-500 text-white px-2 py-1 rounded text-sm" @onclick="() => EditSong(song.Id)">Edit</button>
                            <button class="bg-red-400 text-white px-2 py-1 rounded text-sm" @onclick="() => DeleteSong(song.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </table>
        </div>
    }
</div>

<style>
    .bg-pattern {
        background: linear-gradient( rgba(31, 41, 55, 0.7), rgba(31, 41, 55, 0.7) ), url('dalle.webp');
        background-size: cover;
        background-position: center;
        font-family: 'Rajdhani', sans-serif;
        background-attachment: fixed;
    }

 

    .glass {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px); 
        border-radius: 10px; 
        position: relative; 
        overflow: hidden; 
    }

    .glass:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        pointer-events: none; 
    }
</style>